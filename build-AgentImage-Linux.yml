trigger: none

resources:
- repo: self

parameters:
- name: DownloadAgent
  displayName: Download and Install Latest Pipeline Agent
  type: boolean
  default: True
- name: ContainerRegistry
  displayName: Container Registry Service Connection
  default: georgd
  values:
    - georgd
    - gdcontaineragent
    - georgmcaps

variables:
- group: AzureDevOps
- name: agentPackage
  value: 'none'
- name: imageRepository
  value: 'pipeline-agent'
- name: sourceDir
  value: '$(build.SourcesDirectory)/linux/'
- name: workingDir
  value: '$(build.ArtifactStagingDirectory)/agent/'
- name: download
  value: $[${{ parameters.DownloadAgent }}]

stages:
- stage: BuildAgentImage
  displayName: Build and push Linux Pipeline Agent Image
  jobs:  
  - job: BuildAgentImage
    strategy:
      matrix:
        ubuntu-2004:
          dockerfile: 'dockerfile-ubuntu-2004'
          repoName: 'ubuntu-20.04'
          vmImage: 'ubuntu-20.04'
        ubuntu-2204:
          dockerfile: 'dockerfile-ubuntu-2204'
          repoName: 'ubuntu-22.04'
          vmImage: 'ubuntu-22.04'
      maxParallel: 2    
    pool:
      vmImage: $(vmImage)
    steps:
    - pwsh: |
       $package = common/DownloadAgent.ps1 -AzureDevOpsOrganization $(AzureDevOpsOrganization) -AzureDevOpsPersonalAccessToken $(AzureDevOpsToken) -DestinationDirectory $(Build.ArtifactStagingDirectory)
       Write-Host "##vso[task.setvariable variable=agentPackage]$package"
      condition: eq(variables.download,true) 
      displayName: 'Download Agent Package'
    - pwsh: |
       $tag = linux/BuildAgentImage.ps1 -WorkingDir $(workingDir) -SourceDir $(sourceDir) -AgentPackage $(agentPackage) -Tag $(repoName) -Dockerfile $(dockerfile)
       Write-Host "##vso[task.setvariable variable=tag]$tag"
      displayName: Prepare Linux Pipeline Agent Image
    - script: ls $(workingDir)
    - task: Docker@2
      displayName: Build & Push Linux Pipeline Agent Image
      inputs:
        containerRegistry: '${{ parameters.ContainerRegistry }}'
        repository: '$(imageRepository)'
        command: 'buildAndPush'
        Dockerfile: '$(workingDir)$(dockerfile)'
        tags: |
          $(tag)
          $(repoName)-latest
