trigger: none

parameters:
- name: DownloadAgent
  displayName: Download and Install Latest Pipeline Agent
  type: boolean
  default: False

- name: AgentImage
  displayName: Pipeline Agent Image
  type: string
  default: windows-2019
  values:
    - windows-2019
    - windows-2022

- name: ContainerRegistry
  displayName: Container Registry Service Connection
  default: containeragent
  values:
    - containeragent
    - gdcontaineragent

variables:
  baseImageName: 'mcr.microsoft.com/dotnet/framework/sdk:4.8-windowsservercore-ltsc2019'
  imageRepository: 'pipeline-agent'
  containerRegistry: 'containeragent'
  sourceDir : '$(build.SourcesDirectory)\\windows\\'
  workingDir : '$(build.ArtifactStagingDirectory)\\agent\\'
  dockerfilePath: '$(build.ArtifactStagingDirectory)\\agent\\Dockerfile'
  download: $[${{ parameters.DownloadAgent }}]
  agentPackage: 'none'
  tag: 'windows'

jobs:
- job: 'BuildAgentImage'
  pool:
    vmImage: ${{ parameters.AgentImage }}

  steps:
  - pwsh: |
      $package = common/DownloadAgent.ps1 -AzureDevOpsOrganization $(AzureDevOpsOrganization) -AzureDevOpsPersonalAccessToken $(AzureDevOpsToken) -DestinationDirectory $(Build.ArtifactStagingDirectory)
      Write-Host "##vso[task.setvariable variable=agentPackage]$package"
    condition: eq(variables.download,true) 
    displayName: 'Download Agent Package'
  - pwsh: |
      $tag = windows/BuildAgentImage.ps1 -WorkingDir $(workingDir) -SourceDir $(sourceDir) -AgentPackage $(agentPackage) -BaseImage $(baseImageName) -Tag $(tag) -BuildImage
      docker images
      Write-Host "##vso[task.setvariable variable=tag]$tag"
    displayName: Build Windows Pipeline Agent Image
  - pwsh: |
      Write-Host $(tag)
  - task: Docker@2
    displayName: Push Windows Pipeline Agent Image
    inputs:
      containerRegistry: ${{ parameters.ContainerRegistry }}
      repository: '$(imageRepository)'
      command: 'push'
      tags: '$(tag)'
      addPipelineData: true
      
      