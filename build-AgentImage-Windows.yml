trigger: none

parameters:
- name: DownloadAgent
  displayName: Download and Install Latest Pipeline Agent
  type: boolean
  default: True
- name: ContainerRegistry
  displayName: Container Registry Service Connection
  default: containeragent
  values:
    - containeragent
    - gdcontaineragent

variables:
  agentPackage: 'none'
  imageRepository: 'pipeline-agent'
  sourceDir : '$(build.SourcesDirectory)\\windows\\'
  workingDir : '$(build.ArtifactStagingDirectory)\\agent\\'
  dockerfilePath: '$(build.ArtifactStagingDirectory)\\agent\\Dockerfile'
  download: $[${{ parameters.DownloadAgent }}]

jobs:
- job: 'BuildAgentImage'
  strategy:
   matrix:
     windows-2019:
       $baseImageName = 'mcr.microsoft.com/dotnet/framework/sdk:4.8-windowsservercore-ltsc2019'
       $tag = 'windows-2019'
       $vmImage = 'windows-2019'
     windows-2022:
       $baseImageName = 'mcr.microsoft.com/dotnet/framework/sdk:4.8-windowsservercore-ltsc2022'
       $tag = 'windows-2012'
       $agentImage = 'windows-2022'
   maxParallel: 2
  pool:
    vmImage: $(agentImage)
  steps:
  - pwsh: |
      $package = common/DownloadAgent.ps1 -AzureDevOpsOrganization $(AzureDevOpsOrganization) -AzureDevOpsPersonalAccessToken $(AzureDevOpsToken) -DestinationDirectory $(Build.ArtifactStagingDirectory)
      Write-Host "##vso[task.setvariable variable=agentPackage]$package"
    condition: eq(variables.download,true) 
    displayName: 'Download Agent Package'
  - pwsh: |
      $tag = windows/BuildAgentImage.ps1 -WorkingDir $(workingDir) -SourceDir $(sourceDir) -AgentPackage $(agentPackage) -Tag $(tag)
      Write-Host "##vso[task.setvariable variable=tag]$tag"
    displayName: Prepare Windows Pipeline Agent Image
  - task: Docker@2
    displayName: Build Windows Pipeline Agent Image
    inputs:
      containerRegistry: ${{ parameters.ContainerRegistry }}
      repository: '$(imageRepository)'
      command: 'build'
      Dockerfile: $(dockerfilePath)
      tags: '$(tag)'
      arguments: '--build-arg BASE=$(baseImageName)'
  - task: Docker@2
    displayName: Push Windows Pipeline Agent Image
    inputs:
      containerRegistry: ${{ parameters.ContainerRegistry }}
      repository: '$(imageRepository)'
      command: 'push'
      tags: '$(tag)'
      addPipelineData: true
      
      